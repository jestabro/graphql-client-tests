{"version":3,"file":"urql-svelte.js","sources":["../src/common.ts","../src/queryStore.ts","../src/mutationStore.ts","../src/subscriptionStore.ts","../src/context.ts"],"sourcesContent":["import type { Readable, Writable } from 'svelte/store';\nimport type { AnyVariables, OperationResult } from '@urql/core';\nimport { Source, make } from 'wonka';\n\nexport interface OperationResultState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> extends OperationResult<Data, Variables> {\n  fetching: boolean;\n}\n\n/** A Readable containing an `OperationResult` with a fetching flag. */\nexport type OperationResultStore<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = Readable<OperationResultState<Data, Variables>>;\n\nexport const fromStore = <T>(store$: Readable<T>): Source<T> =>\n  make(observer => store$.subscribe(observer.next));\n\nexport const initialResult = {\n  fetching: false,\n  stale: false,\n  error: undefined,\n  data: undefined,\n  extensions: undefined,\n};\n\nexport interface Pausable {\n  isPaused$: Writable<boolean>;\n  pause(): void;\n  resume(): void;\n}\n\nexport const createPausable = (isPaused$: Writable<boolean>): Pausable => ({\n  isPaused$,\n  pause() {\n    isPaused$.set(true);\n  },\n  resume() {\n    isPaused$.set(false);\n  },\n});\n","import type { DocumentNode } from 'graphql';\nimport {\n  Client,\n  AnyVariables,\n  OperationContext,\n  TypedDocumentNode,\n  RequestPolicy,\n  createRequest,\n} from '@urql/core';\nimport {\n  Source,\n  pipe,\n  map,\n  fromValue,\n  switchMap,\n  subscribe,\n  concat,\n  scan,\n  never,\n} from 'wonka';\nimport { derived, writable } from 'svelte/store';\n\nimport {\n  OperationResultState,\n  OperationResultStore,\n  Pausable,\n  initialResult,\n  createPausable,\n  fromStore,\n} from './common';\n\nexport type QueryArgs<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = {\n  client: Client;\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>;\n  context?: Partial<OperationContext>;\n  requestPolicy?: RequestPolicy;\n  pause?: boolean;\n} & (Variables extends void\n  ? {\n      variables?: Variables;\n    }\n  : Variables extends { [P in keyof Variables]: Variables[P] | null }\n  ? { variables?: Variables }\n  : {\n      variables: Variables;\n    });\n\nexport function queryStore<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  args: QueryArgs<Data, Variables>\n): OperationResultStore<Data, Variables> & Pausable {\n  const request = createRequest(args.query, args.variables as Variables);\n\n  const context: Partial<OperationContext> = {\n    requestPolicy: args.requestPolicy,\n    ...args.context,\n  };\n\n  const operation = args.client.createRequestOperation(\n    'query',\n    request,\n    context\n  );\n  const initialState: OperationResultState<Data, Variables> = {\n    ...initialResult,\n    operation,\n  };\n  const result$ = writable(initialState, () => {\n    return subscription.unsubscribe;\n  });\n  const isPaused$ = writable(!!args.pause);\n\n  const subscription = pipe(\n    fromStore(isPaused$),\n    switchMap(\n      (isPaused): Source<Partial<OperationResultState<Data, Variables>>> => {\n        if (isPaused) {\n          return never as any;\n        }\n\n        return concat<Partial<OperationResultState<Data, Variables>>>([\n          fromValue({ fetching: true, stale: false }),\n          pipe(\n            args.client.executeRequestOperation(operation),\n            map(({ stale, data, error, extensions, operation }) => ({\n              fetching: false,\n              stale: !!stale,\n              data,\n              error,\n              operation,\n              extensions,\n            }))\n          ),\n          fromValue({ fetching: false }),\n        ]);\n      }\n    ),\n    scan(\n      (result: OperationResultState<Data, Variables>, partial) => ({\n        ...result,\n        ...partial,\n      }),\n      initialState\n    ),\n    subscribe(result => {\n      result$.set(result);\n    })\n  );\n\n  return {\n    ...derived(result$, (result, set) => {\n      set(result);\n    }),\n    ...createPausable(isPaused$),\n  };\n}\n","import type { DocumentNode } from 'graphql';\nimport {\n  AnyVariables,\n  Client,\n  OperationContext,\n  TypedDocumentNode,\n  createRequest,\n} from '@urql/core';\nimport { pipe, map, scan, subscribe } from 'wonka';\nimport { derived, writable } from 'svelte/store';\n\nimport {\n  OperationResultState,\n  OperationResultStore,\n  initialResult,\n} from './common';\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\n\nexport type MutationArgs<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = {\n  client: Client;\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>;\n  context?: Partial<OperationContext>;\n} & (Variables extends void\n  ? {\n      variables?: Variables;\n    }\n  : Variables extends { [P in keyof Variables]: Variables[P] | null }\n  ? { variables?: Variables }\n  : {\n      variables: Variables;\n    });\n\nexport function mutationStore<\n  Data = any,\n  Result = Data,\n  Variables extends AnyVariables = AnyVariables\n>(\n  args: MutationArgs<Data, Variables>,\n  handler?: SubscriptionHandler<Data, Result>\n): OperationResultStore<Result, Variables> {\n  const request = createRequest(args.query, args.variables as Variables);\n  const operation = args.client.createRequestOperation(\n    'mutation',\n    request,\n    args.context\n  );\n  const initialState: OperationResultState<Result, Variables> = {\n    ...initialResult,\n    operation,\n    fetching: true,\n  };\n  const result$ = writable(initialState);\n\n  const subscription = pipe(\n    pipe(\n      args.client.executeRequestOperation(operation),\n      map(({ stale, data, error, extensions, operation }) => ({\n        fetching: false,\n        stale: !!stale,\n        data,\n        error,\n        operation,\n        extensions,\n      }))\n    ),\n    scan((result: OperationResultState<Result, Variables>, partial: any) => {\n      // If a handler has been passed, it's used to merge new data in\n      const data =\n        partial.data !== undefined\n          ? typeof handler === 'function'\n            ? handler(result.data, partial.data)\n            : partial.data\n          : result.data;\n      return { ...result, ...partial, data };\n    }, initialState),\n    subscribe(result => {\n      result$.set(result);\n    })\n  );\n\n  return derived(result$, (result, set) => {\n    set(result);\n    return subscription.unsubscribe;\n  });\n}\n","import type { DocumentNode } from 'graphql';\nimport {\n  AnyVariables,\n  Client,\n  OperationContext,\n  TypedDocumentNode,\n  createRequest,\n} from '@urql/core';\nimport {\n  Source,\n  pipe,\n  map,\n  fromValue,\n  switchMap,\n  subscribe,\n  concat,\n  scan,\n  never,\n} from 'wonka';\nimport { derived, writable } from 'svelte/store';\n\nimport {\n  OperationResultState,\n  OperationResultStore,\n  Pausable,\n  initialResult,\n  createPausable,\n  fromStore,\n} from './common';\n\nexport type SubscriptionArgs<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n> = {\n  client: Client;\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>;\n  context?: Partial<OperationContext>;\n  pause?: boolean;\n} & (Variables extends void\n  ? {\n      variables?: Variables;\n    }\n  : Variables extends { [P in keyof Variables]: Variables[P] | null }\n  ? { variables?: Variables }\n  : {\n      variables: Variables;\n    });\n\nexport function subscriptionStore<\n  Data,\n  Variables extends AnyVariables = AnyVariables\n>(\n  args: SubscriptionArgs<Data, Variables>\n): OperationResultStore<Data, Variables> & Pausable {\n  const request = createRequest(args.query, args.variables as Variables);\n\n  const operation = args.client.createRequestOperation(\n    'subscription',\n    request,\n    args.context\n  );\n  const initialState: OperationResultState<Data, Variables> = {\n    ...initialResult,\n    operation,\n  };\n  const result$ = writable(initialState, () => {\n    return subscription.unsubscribe;\n  });\n  const isPaused$ = writable(!!args.pause);\n\n  const subscription = pipe(\n    fromStore(isPaused$),\n    switchMap(\n      (isPaused): Source<Partial<OperationResultState<Data, Variables>>> => {\n        if (isPaused) {\n          return never as any;\n        }\n\n        return concat<Partial<OperationResultState<Data, Variables>>>([\n          fromValue({ fetching: true, stale: false }),\n          pipe(\n            args.client.executeRequestOperation(operation),\n            map(({ stale, data, error, extensions, operation }) => ({\n              fetching: true,\n              stale: !!stale,\n              data,\n              error,\n              operation,\n              extensions,\n            }))\n          ),\n          fromValue({ fetching: false }),\n        ]);\n      }\n    ),\n    scan(\n      (result: OperationResultState<Data, Variables>, partial) => ({\n        ...result,\n        ...partial,\n      }),\n      initialState\n    ),\n    subscribe(result => {\n      result$.set(result);\n    })\n  );\n\n  return {\n    ...derived(result$, (result, set) => {\n      set(result);\n    }),\n    ...createPausable(isPaused$),\n  };\n}\n","import { setContext, getContext } from 'svelte';\nimport { Client, ClientOptions } from '@urql/core';\n\nconst _contextKey = '$$_urql';\n\n/** Retrieves a Client from Svelte's context */\nexport const getContextClient = (): Client => {\n  const client = getContext(_contextKey);\n  if (process.env.NODE_ENV !== 'production' && !client) {\n    throw new Error(\n      'No urql Client was found in Svelte context. Did you forget to call setContextClient?'\n    );\n  }\n\n  return client as Client;\n};\n\n/** Sets a Client on Svelte's context */\nexport const setContextClient = (client: Client): void => {\n  setContext(_contextKey, client);\n};\n\n/** Creates Client and adds it to Svelte's context */\nexport const initContextClient = (args: ClientOptions): Client => {\n  const client = new Client(args);\n  setContextClient(client);\n  return client;\n};\n"],"names":["fromStore","store$","make","observer","subscribe","next","initialResult","fetching","stale","error","undefined","data","extensions","createPausable","isPaused$","set","queryStore","args","request","createRequest","query","variables","context","operation","client","createRequestOperation","initialState","result$","writable","subscription","result","partial","switchMap","isPaused","never","concat","fromValue","mutationStore","handler","map","executeRequestOperation","subscriptionStore","_contextKey","getContextClient","getContext","Error","setContextClient","setContext","initContextClient","Client"],"mappings":"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"}
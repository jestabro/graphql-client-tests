import type { Readable, Writable } from 'svelte/store';
import type { AnyVariables, OperationResult } from '@urql/core';
import { Source } from 'wonka';
export interface OperationResultState<Data = any, Variables extends AnyVariables = AnyVariables> extends OperationResult<Data, Variables> {
    fetching: boolean;
}
/** A Readable containing an `OperationResult` with a fetching flag. */
export type OperationResultStore<Data = any, Variables extends AnyVariables = AnyVariables> = Readable<OperationResultState<Data, Variables>>;
export declare const fromStore: <T>(store$: Readable<T>) => Source<T>;
export declare const initialResult: {
    fetching: boolean;
    stale: boolean;
    error: undefined;
    data: undefined;
    extensions: undefined;
};
export interface Pausable {
    isPaused$: Writable<boolean>;
    pause(): void;
    resume(): void;
}
export declare const createPausable: (isPaused$: Writable<boolean>) => Pausable;

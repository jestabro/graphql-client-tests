import type { DocumentNode } from 'graphql';
import { AnyVariables, Client, OperationContext, TypedDocumentNode } from '@urql/core';
import { OperationResultStore } from './common';
export type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;
export type MutationArgs<Data = any, Variables extends AnyVariables = AnyVariables> = {
    client: Client;
    query: string | DocumentNode | TypedDocumentNode<Data, Variables>;
    context?: Partial<OperationContext>;
} & (Variables extends void ? {
    variables?: Variables;
} : Variables extends {
    [P in keyof Variables]: Variables[P] | null;
} ? {
    variables?: Variables;
} : {
    variables: Variables;
});
export declare function mutationStore<Data = any, Result = Data, Variables extends AnyVariables = AnyVariables>(args: MutationArgs<Data, Variables>, handler?: SubscriptionHandler<Data, Result>): OperationResultStore<Result, Variables>;

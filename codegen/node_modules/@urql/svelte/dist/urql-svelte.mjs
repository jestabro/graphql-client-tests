import { createRequest as e, Client as r } from "@urql/core";

export * from "@urql/core";

import { make as t, subscribe as a, scan as o, switchMap as n, never as i, concat as s, fromValue as u, map as c } from "wonka";

import { writable as v, derived as l } from "svelte/store";

import { getContext as p, setContext as f } from "svelte";

var fromStore = e => t((r => e.subscribe(r.next)));

var d = {
  fetching: !1,
  stale: !1,
  error: void 0,
  data: void 0,
  extensions: void 0
};

var createPausable = e => ({
  isPaused$: e,
  pause() {
    e.set(!0);
  },
  resume() {
    e.set(!1);
  }
});

function queryStore(r) {
  var t = e(r.query, r.variables);
  var p = {
    requestPolicy: r.requestPolicy,
    ...r.context
  };
  var f = r.client.createRequestOperation("query", t, p);
  var q = {
    ...d,
    operation: f
  };
  var x = v(q, (() => m.unsubscribe));
  var b = v(!!r.pause);
  var m = a((e => {
    x.set(e);
  }))(o(((e, r) => ({
    ...e,
    ...r
  })), q)(n((e => {
    if (e) {
      return i;
    }
    return s([ u({
      fetching: !0,
      stale: !1
    }), c((({stale: e, data: r, error: t, extensions: a, operation: o}) => ({
      fetching: !1,
      stale: !!e,
      data: r,
      error: t,
      operation: o,
      extensions: a
    })))(r.client.executeRequestOperation(f)), u({
      fetching: !1
    }) ]);
  }))(fromStore(b))));
  return {
    ...l(x, ((e, r) => {
      r(e);
    })),
    ...createPausable(b)
  };
}

function mutationStore(r, t) {
  var n = e(r.query, r.variables);
  var i = r.client.createRequestOperation("mutation", n, r.context);
  var s = {
    ...d,
    operation: i,
    fetching: !0
  };
  var u = v(s);
  var p = a((e => {
    u.set(e);
  }))(o(((e, r) => {
    var a = void 0 !== r.data ? "function" == typeof t ? t(e.data, r.data) : r.data : e.data;
    return {
      ...e,
      ...r,
      data: a
    };
  }), s)(c((({stale: e, data: r, error: t, extensions: a, operation: o}) => ({
    fetching: !1,
    stale: !!e,
    data: r,
    error: t,
    operation: o,
    extensions: a
  })))(r.client.executeRequestOperation(i))));
  return l(u, ((e, r) => {
    r(e);
    return p.unsubscribe;
  }));
}

function subscriptionStore(r) {
  var t = e(r.query, r.variables);
  var p = r.client.createRequestOperation("subscription", t, r.context);
  var f = {
    ...d,
    operation: p
  };
  var q = v(f, (() => b.unsubscribe));
  var x = v(!!r.pause);
  var b = a((e => {
    q.set(e);
  }))(o(((e, r) => ({
    ...e,
    ...r
  })), f)(n((e => {
    if (e) {
      return i;
    }
    return s([ u({
      fetching: !0,
      stale: !1
    }), c((({stale: e, data: r, error: t, extensions: a, operation: o}) => ({
      fetching: !0,
      stale: !!e,
      data: r,
      error: t,
      operation: o,
      extensions: a
    })))(r.client.executeRequestOperation(p)), u({
      fetching: !1
    }) ]);
  }))(fromStore(x))));
  return {
    ...l(q, ((e, r) => {
      r(e);
    })),
    ...createPausable(x)
  };
}

var getContextClient = () => {
  var e = p("$$_urql");
  if ("production" !== process.env.NODE_ENV && !e) {
    throw new Error("No urql Client was found in Svelte context. Did you forget to call setContextClient?");
  }
  return e;
};

var setContextClient = e => {
  f("$$_urql", e);
};

var initContextClient = e => {
  var t = new r(e);
  setContextClient(t);
  return t;
};

export { getContextClient, initContextClient, mutationStore, queryStore, setContextClient, subscriptionStore };
//# sourceMappingURL=urql-svelte.mjs.map
